@use "variables" as *;

// Grid
.grid-template-columns-responsive {
  /* Between tablet-sm and tablet we want gradual increase of side spacing, 
   * have it fixed for mobile (1rem) and be > 5rem up to the remaining space for desktop.
   * Probably it'd work without minmax func for mobile and desktop (that is, fixed values 
   * $container-spacing-sm on mobile and 1fr on desktop for the side columns).
   * Check also question 1 from https://discord.com/channels/436251713830125568/1205251119148703816/1205251119148703816 for 
   * the reason this was introduced (instead of using only containers)
   * Codepen for concept - https://codepen.io/rokata/pen/mdoQLzP
   */
  display: grid;
  grid-template-columns:
    minmax($container-spacing-sm, 1fr)
    minmax(0, $desktop-width)
    minmax($container-spacing-sm, 1fr);

  @media (min-width: #{$tablet-width-sm}) {
    grid-template-columns: var(--clamp-spacing) minmax(0, $desktop-width) var(--clamp-spacing);
  }

  @media (min-width: #{$tablet-width}) {
    grid-template-columns:
      minmax($container-spacing-lg, 1fr)
      minmax(0, $desktop-width)
      minmax($container-spacing-lg, 1fr);
  }
}

// Buttons
.btn {
  display: inline-block;
  padding: $button-block-padding 1em;
  cursor: pointer;
  border-radius: 100vh;
  background: none;
  border: 0;
  font-weight: var(--fw-500);
  color: var(--clr-primary-300);
}

.btn-primary {
  background-color: var(--clr-primary-300);
  color: var(--clr-neutral-100);
}

// Misc
.separator {
  position: relative;

  &::before {
    height: 5px;
    content: "";
    position: absolute;
    left: 0;
    bottom: 0;
    width: 100%;
    background-color: var(--clr-neutral-200);
    border-radius: 100vw;
  }
}

// Utlities
.container {
  max-width: #{$desktop-width};
  margin: 0 auto;
  box-sizing: content-box; // this makes .container equivalent to the grid setup from the beginning of this file
  padding-inline: $container-spacing-sm;

  @media (min-width: #{$tablet-width-sm}) {
    padding-inline: var(--clamp-spacing);
  }
}

.split {
  display: flex;
  flex-direction: column;
  gap: var(--split-gap, 1rem);

  @media (min-width: #{$tablet-width-sm}) {
    flex-direction: row;
  }
}

.flow-content > * + * {
  margin-top: var(--flow-spacer, 1rem);
}

.shadow {
  box-shadow: 0 1.5em 50px 10px #888888;;
  margin-bottom: 1.5rem; // so text below the image is not covered by shadow
}

.link {
  color: var(--clr-primary-300);
}
